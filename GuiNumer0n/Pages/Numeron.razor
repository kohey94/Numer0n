@page "/numeron"

@using Numer0n.Common;
@using System.Text.RegularExpressions;

<h3>Numer0n</h3>

@if (@answerNumber == string.Empty)
{
    <p>no data</p>
    <Addons>
        <Addon AddonType="AddonType.Body">
            <NumericEdit Placeholder="何桁のNumer0nに挑戦しますか？" TValue="int?" @bind-Value="Digit" />
        </Addon>
        <Addon AddonType="AddonType.End">
            <Button Color="Color.Primary" @onclick="@(e => SetDigits((int)Digit))">挑戦</Button>
        </Addon>
    </Addons>
}
else
{
    <p>@answerNumber</p>
    <Addons>
        <Addon AddonType="AddonType.Body">
            <TextEdit Placeholder="数字を入力してください。" @bind-Text="input" />
        </Addon>
        <Addon AddonType="AddonType.End">
            <Button Color="Color.Secondary" @onclick="@(e => SetList(input))">判定</Button>
        </Addon>
    </Addons>
}

<br />
<Table Bordered="true" Hoverable="true">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>回</TableHeaderCell>
            <TableHeaderCell>入力値</TableHeaderCell>
            <TableHeaderCell>場所も数字も当たり</TableHeaderCell>
            <TableHeaderCell>数字が当たり</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var d in inputList)
        {
            <TableRow>
                <TableRowHeader>@d.Count</TableRowHeader>
                <TableRowCell>@d.InputNumber</TableRowCell>
                <TableRowCell>@d.PlaceNumberHit</TableRowCell>
                <TableRowCell>@d.NumberHit</TableRowCell>
            </TableRow>

        }
    </TableBody>
</Table>


<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent Size="@modalSize" Centered="@centered">
        <ModalHeader>
            <ModalTitle>結果</ModalTitle>
        </ModalHeader>
        <ModalBody MaxHeight="@maxHeight">
            <Label>@inputList.Count 回目で当たりました。 </Label>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">閉じる</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    /// <summary>
    /// 桁数選択
    /// </summary>
    private int? Digit { get; set; }

    // TODO どうにかしてplaceholderに文字表示させたままnull非許容にしたい
    private void SetDigits(int? Digit)
    {

        if (Regex.IsMatch(Digit.ToString(), "^\\d{1}$"))
        {
            Numer0n.MaxLength = (int)Digit;
            GetData();
        }
        else
        {
            // TODO バリデーションエラー時の処理
        }
    }

    private Modal modalRef;
    private bool centered = true;
    private ModalSize modalSize = ModalSize.Small;
    private int? maxHeight = null;

    private void ShowModal()
    {

        modalRef.Show();
        answerNumber = string.Empty;
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    private string input = "";

    private List<InputNumberHistoryModel> inputList = new List<InputNumberHistoryModel>();

    protected void SetList(string inputValue)
    {
        (int placeNumberHit, int numberHit) = Numer0n.Judgment(inputValue.ToCharArray(), answerNumber.ToCharArray());

        var id = new InputNumberHistoryModel(
            inputValue,
            placeNumberHit,
            numberHit);

        inputList.Add(id);

        if (placeNumberHit == Numer0n.MaxLength) ShowModal();
    }

    protected List<InputNumberHistoryModel> ShowList()
    {
        return inputList;
    }

    string answerNumber = string.Empty;

    protected void GetData()
    {
        Digit = null;
        input = string.Empty;
        InputNumberHistoryModel.ClearCount();
        inputList.Clear();
        answerNumber = Numer0n.GenerateRandomData();
    }


}
