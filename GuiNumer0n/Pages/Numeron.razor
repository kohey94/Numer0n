@page "/numeron"


@using System.Text.RegularExpressions;
@using Numer0n.Common;
@inject INumer0nService nl;

<h3>Numer0n</h3>

<Switch TValue="bool" @bind-Checked="@isCheat">チート</Switch>
@if (isCheat)
{
    <p>@answerNumber</p>

}
else
{
    <p>xxxxx</p>
}
@code{
    bool isCheat = false;
}

@if (@isDigitSelect)
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            何桁のNumer0nに挑戦しますか？
        </Column>
    </Row>
    <Row>
        <Validations ValidateOnLoad="false">
            <Validation UsePattern="true">
                <Column ColumnSize="ColumnSize.Is9">
                    <NumericEdit Pattern="^[1-9]{1}$" TValue="int?" @bind-Value="Digit">
                        <Feedback>
                            <ValidationError>1桁の数字を入力してください。</ValidationError>
                        </Feedback>
                    </NumericEdit>
                </Column>
            </Validation>
        </Validations>
        <Column ColumnSize="ColumnSize.Is3">
            <Button Color="Color.Danger" @onclick="@(e => SetNumer0nDigit((int)Digit))">挑戦</Button>
        </Column>
    </Row>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            数字を入力してください。
        </Column>
    </Row>
    <Row>
        <Validations ValidateOnLoad="false">
            <Validation UsePattern="true">
                <Column ColumnSize="ColumnSize.Is9">
                    <TextEdit Pattern="@RegexString" @bind-Text="Input">
                        <Feedback>
                            <ValidationError>@Digit 桁の数字を入力してください。</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Column>
            </Validation>
        </Validations>
        <Column ColumnSize="ColumnSize.Is3">
            <Button Color="Color.Success" @onclick="@(e => SetNumber(Input))">判定</Button>
        </Column>
    </Row>
}

<br />
<Table Bordered="true" Hoverable="true">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>回</TableHeaderCell>
            <TableHeaderCell>入力値</TableHeaderCell>
            <TableHeaderCell>場所も数字も当たり</TableHeaderCell>
            <TableHeaderCell>数字が当たり</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var d in inputList)
        {
            <TableRow>
                <TableRowHeader>@d.Count</TableRowHeader>
                <TableRowCell>@d.InputNumber</TableRowCell>
                <TableRowCell>@d.PlaceNumberHit</TableRowCell>
                <TableRowCell>@d.NumberHit</TableRowCell>
            </TableRow>

        }
    </TableBody>
</Table>


<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent Size="@modalSize" Centered="@centered">
        <ModalHeader>
            <ModalTitle>結果</ModalTitle>
        </ModalHeader>
        <ModalBody MaxHeight="@maxHeight">
            <Label>正解は @answerNumber でした。 </Label>
            <Label>@inputList.Count 回目で当たりました。 </Label>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">閉じる</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    /// <summary>
    /// モーダル関係の処理
    /// </summary>

    private Modal modalRef;
    private bool centered = true;
    private ModalSize modalSize = ModalSize.Small;
    private int? maxHeight = null;

    private void ShowModal()
    {
        isDigitSelect = true;
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }
}

@code {

    // TODO どうにかしてplaceholderに文字表示させたままnull非許容にしたい
    private void SetNumer0nDigit(int? Digit)
    {
        if (Regex.IsMatch(Digit.ToString(), "^[1-9]$"))
        {
            nl = new Numer0nService((int)Digit);

            RegexString = "^[0-9]{" + Digit + "}$";
            GetNumer0nData();
        }
        else
        {
            // TODO バリデーションエラー時の処理
        }
    }

    private void GetNumer0nData()
    {

        Input = string.Empty;
        InputNumberHistoryModel.ClearCount();
        inputList.Clear();
        answerNumber = nl.GenerateRandomData();
        isDigitSelect = false;
    }

    private void SetNumber(string inputValue)
    {
        if (nl.TryValidationInputValue(inputValue, out char[] validationedValue))
        {
            (int placeNumberHit, int numberHit, bool isCorrect)
                = nl.Judgment(validationedValue, answerNumber.ToCharArray());

            var id = new InputNumberHistoryModel(
                inputValue,
                placeNumberHit,
                numberHit);

            inputList.Add(id);

            if (isCorrect)
            {
                Digit = null;
                ShowModal();
            }
        }
    }


}

@code {
    /// <summary>
    /// 桁数選択
    /// </summary>
    private int? Digit { get; set; }

    /// <summary>
    /// 入力値
    /// </summary>
    private string Input { get; set; } = string.Empty;

    /// TODO NUmer0nLogic.cs側に入力値の正規表現の変数持たせてそれを参照するようにしたい
    /// <summary>
    /// 入力値の正規表現（初期は4桁）
    /// </summary>
    private string RegexString { get; set; } = "^[0-9]{4}$";

    string answerNumber = string.Empty;

    bool isDigitSelect = true;

    private List<InputNumberHistoryModel> inputList = new List<InputNumberHistoryModel>();

    private List<InputNumberHistoryModel> ShowList()
    {
        return inputList;
    }

    /// <summary>
    /// ↓Numer0n.csを参照している処理（削除予定）
    /// </summary>
    /// <param name="Digit"></param>

    // TODO どうにかしてplaceholderに文字表示させたままnull非許容にしたい
    private void SetDigits(int? Digit)
    {

        if (Regex.IsMatch(Digit.ToString(), "^[1-9]$"))
        {
            Numer0n.MaxLength = (int)Digit;
            RegexString = "^[0-9]{" + Digit + "}$";
            GetData();
        }
        else
        {
            // TODO バリデーションエラー時の処理
        }
    }

    protected void SetList(string inputValue)
    {
        (int placeNumberHit, int numberHit) = Numer0n.Judgment(inputValue.ToCharArray(), answerNumber.ToCharArray());

        var id = new InputNumberHistoryModel(
            inputValue,
            placeNumberHit,
            numberHit);

        inputList.Add(id);

        if (placeNumberHit == Numer0n.MaxLength)
        {
            Digit = null;
            ShowModal();
        }
    }

    protected void GetData()
    {

        Input = string.Empty;
        InputNumberHistoryModel.ClearCount();
        inputList.Clear();
        answerNumber = Numer0n.GenerateRandomData();
        isDigitSelect = false;
    }
}
