@page "/numeron"

@using Numer0n.Common;
@using System.Text.RegularExpressions;

<h3>Numer0n</h3>

<Switch TValue="bool" @bind-Checked="@isCheat">チート</Switch>
@code{
    bool isCheat;
}
@if (isCheat)
{
    <p>@answerNumber</p>

}
else
{
    <p>xxxxx</p>
}



@if (@isDigitSelect)
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            何桁のNumer0nに挑戦しますか？
        </Column>
    </Row>
    <Row>
        <Validations ValidateOnLoad="false">
            <Validation UsePattern="true">
                <Column ColumnSize="ColumnSize.Is9">
                    <NumericEdit Pattern="^[1-9]{1}$" TValue="int?" @bind-Value="Digit">
                        <Feedback>
                            <ValidationError>1桁の数字を入力してください。</ValidationError>
                        </Feedback>
                    </NumericEdit>
                </Column>
            </Validation>
        </Validations>
        <Column ColumnSize="ColumnSize.Is3">
            <Button Color="Color.Danger" @onclick="@(e => SetDigits((int)Digit))">挑戦</Button>
        </Column>
    </Row>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            数字を入力してください。
        </Column>
    </Row>
    <Row>
        <Validations ValidateOnLoad="false">
            <Validation UsePattern="true">
                <Column ColumnSize="ColumnSize.Is9">
                    <TextEdit Pattern="@seikihyogen" @bind-Text="input">
                        <Feedback>
                            <ValidationError>@Digit 桁の数字を入力してください。</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Column>
            </Validation>
        </Validations>
        <Column ColumnSize="ColumnSize.Is3">
            <Button Color="Color.Success" @onclick="@(e => SetList(input))">判定</Button>
        </Column>
    </Row>
}

<br />
<Table Bordered="true" Hoverable="true">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>回</TableHeaderCell>
            <TableHeaderCell>入力値</TableHeaderCell>
            <TableHeaderCell>場所も数字も当たり</TableHeaderCell>
            <TableHeaderCell>数字が当たり</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var d in inputList)
        {
            <TableRow>
                <TableRowHeader>@d.Count</TableRowHeader>
                <TableRowCell>@d.InputNumber</TableRowCell>
                <TableRowCell>@d.PlaceNumberHit</TableRowCell>
                <TableRowCell>@d.NumberHit</TableRowCell>
            </TableRow>

        }
    </TableBody>
</Table>


<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent Size="@modalSize" Centered="@centered">
        <ModalHeader>
            <ModalTitle>結果</ModalTitle>
        </ModalHeader>
        <ModalBody MaxHeight="@maxHeight">
            <Label>正解は @answerNumber でした。 </Label>
            <Label>@inputList.Count 回目で当たりました。 </Label>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">閉じる</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    /// <summary>
    /// 桁数選択
    /// </summary>
    private int? Digit { get; set; }

    private string seikihyogen { get; set; } = "^[0-9]{4}$";

    /// <summary>
    /// 入力値
    /// </summary>
    private string input = "";

    bool isDigitSelect = true;

    // TODO どうにかしてplaceholderに文字表示させたままnull非許容にしたい
    private void SetDigits(int? Digit)
    {

        if (Regex.IsMatch(Digit.ToString(), "^[1-9]$"))
        {
            Numer0n.MaxLength = (int)Digit;
            seikihyogen = "^[0-9]{" + Digit + "}$";
            GetData();
        }
        else
        {
            // TODO バリデーションエラー時の処理
        }
    }

    private Modal modalRef;
    private bool centered = true;
    private ModalSize modalSize = ModalSize.Small;
    private int? maxHeight = null;

    private void ShowModal()
    {
        isDigitSelect = true;
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }



    private List<InputNumberHistoryModel> inputList = new List<InputNumberHistoryModel>();

    protected void SetList(string inputValue)
    {
        (int placeNumberHit, int numberHit) = Numer0n.Judgment(inputValue.ToCharArray(), answerNumber.ToCharArray());

        var id = new InputNumberHistoryModel(
            inputValue,
            placeNumberHit,
            numberHit);

        inputList.Add(id);

        if (placeNumberHit == Numer0n.MaxLength) ShowModal();
    }

    protected List<InputNumberHistoryModel> ShowList()
    {
        return inputList;
    }

    string answerNumber = string.Empty;

    protected void GetData()
    {
        Digit = null;
        input = string.Empty;
        InputNumberHistoryModel.ClearCount();
        inputList.Clear();
        answerNumber = Numer0n.GenerateRandomData();
        isDigitSelect = false;
    }


}
